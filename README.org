#+title: GrimDawn Player Parser


* Introduction
A =Grim Dawn= player parser.

** References
+ [[http://www.lost.org.uk/grimdawn/][GrimDawn decryption code samples]]

* Usage
** Decode ~player.gdc~ files into ~player.json~ files
#+begin_src sh
just decode
#+end_src

** Filter ~player.json~ files
The ~player.json~ files are large and we don't need all the sections for importing into =Tableau=. We use the =jq= commandline tool to filter out unneeded sections.


** Combine ~player.json~ files into ~all-characters-combined.json~
#+begin_src sh
just combine
#+end_src

* Development
** Design
The design is split into the following sections:
+ Decoding the ~player.gdc~ files into ~player.json~ files
+ Filtering the ~player.json~ files to contain the sections useful for comparison
+ Combining the ~player.json~ files into single =json= file for use in =Tableau=

*** Decode ~player.gdc~ files into ~player.json~ files
We implement the decoding of encrypted ~player.gdc~ files (which are written by =Grim Dawn=) in command line tool =grimparse=.

**** Requirements
1. Read in and parse encrypted =Grim Dawn= ~player.gdc~ files
2. Write out player info in a =json= format.

**** Implementation
+ =grimparse= executable: ("./build/grimparse")

*** Filter ~player.json~ files
We need to filter the =json= files.

**** Requirements
1. Read in ~player.json~ file and remove unneeded sections.

**** Implementation
We will use the =jq= command-line tool.

Example:
#+begin_src jq
{
  "player-name": ."player-name",
  "player-data": {
    "bio": .["player-data"].bio,
    "factions": .["player-data"].factions,
    "info": .["player-data"].info,
    "inventory": .["player-data"].inventory,
    "skills": .["player-data"].skills,
    "stats": .["player-data"].stats,
    "tokens": .["player-data"].tokens
  }
}
#+end_src

*** Combine ~player.json~ files into ~all-characters-combined.json~
We need to combine the filtered =json= files into one single file.

**** Requirements
1. Read in multiple ~player.json~ files and combine into one single ~all-characters-combined.json~ file

**** Solution
We will use the =jq= command-line tool.

Example:
#+begin_src sh
jq -s '.' \
    testfiles/_Iska/player.json      \
    testfiles/_Luna/player.json      \
    testfiles/_Luthar/player.json    \
    testfiles/_Thor/player.json      \
    > testfiles/combined.json
#+end_src
** Worklow
*** Build
The build is automated via the =just= tool with build recipes defined in ~".justfile"~.

**** Generate build config
#+begin_src sh
just generate
#+end_src

**** Run build command
#+begin_src sh
just build
#+end_src

*** Test
See the ~'.justfile'~ for all test recipes.

**** Test all
#+begin_src sh
just test-all
#+end_src

*** Debug
The debug recipe runs the test command under =LLDB=:
- The ~.lldbinit~ sets up breakpoints for any ~throw~ statement allowing one to simply run the program and see where it breaks into the debugger.

**** Start the debugger
#+begin_src sh
just debug
#+end_src

**** Run the program
#+begin_src lldb
run
#+end_src

**** Show the stack-trace on break
#+begin_src lldb
bt
#+end_src
* Issues and Solutions :issue:
** Open [0/1] :open:
*** TODO Update building and running on supported platforms
We have updated the building process to use the following tools:
+ =cmake=: for easier build file generation now that we moved to multiple cpp files
+ =just=: for consistent recipe names for build/test/run actions

However we have not validated this setup for all platforms.

Below is the old build setup instructions that may need to be incorporated in the just file.
**** Setup (OLD INSTRUCTIONS)
***** GCC
#+begin_src sh
g++ -g ./decrypt.cpp -std=c++17
#+end_src

***** Clang/LLVM
****** Install
#+begin_src sh
brew install llvm
#+end_src

****** Setup Environment
#+begin_src sh
export PATH="/opt/homebrew/opt/llvm/bin:$PATH"
export LDFLAGS="-L/opt/homebrew/opt/llvm/lib"
export CPPFLAGS="-I/opt/homebrew/opt/llvm/include"
#+end_src

****** Build
#+begin_src sh
clang++ -g -O0 -std=c++17 -o grimparse decrypt.cpp
#+end_src

***** Microsoft Visual Studio
****** Install
#+begin_src sh
choco install visualstudio2019-workload-vctools
#+end_src

****** Setup PATH
#+begin_src powershell
set env:PATH = $PATH:"C:\Program Files (x86)\Microsoft Visual Studio\2019\BuildTools\MSBuild\Current\Bin"
#+end_src

****** Build
#+begin_src bat
vcvars64.bat
cl /Zi decrypt.cpp
#+end_src

** Solved [2/2] :solved:
*** DONE Decryption samples are old and need to be updated to work
CLOSED: [2023-11-21 Tue 21:30]
:LOGBOOK:
- State "DONE"       from "TODO"       [2023-11-21 Tue 21:30]
:END:
+ When running the =c++= ~decrypt.cc~ it fails with an exception on a version check

**** Conclusion
We referenced the player decryption code from =GDStash= =java= jar file. I am not yet sure what the discovery process was for the =GDStash= implementation.
*** DONE Parse all players into a combined ~json~ file
CLOSED: [2023-12-26 Tue 13:04]
:LOGBOOK:
- State "DONE"       from "TODO"       [2023-12-26 Tue 13:04]
:END:
We want to load the parsed ~json~ file into =Tableau Desktop= so we can compare characters.

**** Getting =Grimdawn= saves
Here we can pull in =grimdawn_save= project as a =git= submodule.
**** Get the list of ~player.gdc~ files for each character
#+begin_src sh :results table
ls  grimdawn_save/main/*/player.gdc
#+end_src
